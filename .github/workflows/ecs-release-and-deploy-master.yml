name: "ECS: Release and deploy to PROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "17"
        type: string
      container_image_fixed_tag:
        type: string
        required: false
        default: ""
      do_ecs_deployment:
        type: boolean
        required: false
        default: true
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      ECR_REGISTRY:
        required: true
      PRODUCTION_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_CHANNEL_ID:
        required: true
      SLACK_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_URL:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency: ${{ github.workflow }}

jobs:
  ecs-release-and-deploy-master:
    runs-on: ubuntu-20.04
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "corretto"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1

      - name: "Read ecr.image.name from workflow.properties"
        id: ecr_image_name
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecr.image.name"

      - name: "Read ecs.taskDefinition.container.name from workflow.properties"
        id: ecs_taskDefinition_container_name
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.taskDefinition.container.name"

      - name: "Read ecs.cluster.name.cs.production from workflow.properties"
        id: ecs_cluster_name_cs_production
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.cluster.name.cs.production"

      - name: "Read ecs.service.name.production from workflow.properties"
        id: ecs_service_name_production
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.service.name.production"

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Login to ECR"
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
          username: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}

      - name: "Env variable: MAVEN_GROUP_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_GROUP_ID=$(mvn $MAVEN_ARGS org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.groupId -q -DforceStdout 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: MAVEN_ARTIFACT_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_ARTIFACT_ID=$(mvn $MAVEN_ARGS org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.artifactId -q -DforceStdout 2>/dev/null)" >> $GITHUB_ENV

      - name: "Slack: In progress"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        id: slack-progress
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          job: RELEASE
          status: IN_PROGRESS
          type: SERVICE

      - name: "Build service with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mvn $MAVEN_ARGS clean install \
          -DskipDockerBuild

      - name: "Generate changelog and create release"
        id: create-changelog-and-release
        uses: CleverShuttle/gh-composite-actions/actions/create-changelog-and-release@v1
        with:
          artifactory_username: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: "Deploy to Artifactory"
        continue-on-error: true
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        # The docker image must still be created for the new version. Therefore, the step cannot be skipped (-DskipDockerBuild)
        run: |
          mvn $MAVEN_ARGS deploy \
          -DskipForbiddenApisCheck \
          -Dmaven.main.skip \
          -DskipTests \
          -DskipIntegrationTests \
          -DskipUnitTests \
          -DskipDependencyCheck

      - name: "Run Sonar analysis for master"
        uses: CleverShuttle/gh-composite-actions/actions/sonar-java-analysis-master@v1
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          artifactory_username: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          sonar_url: ${{ secrets.SONAR_URL }}
          sonar_project_key: "${{ env.MAVEN_GROUP_ID }}:${{ env.MAVEN_ARTIFACT_ID }}"

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Env variable: IMAGE_TAG"
        env:
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_NAME: ${{ steps.ecr_image_name.outputs.value }}
          VERSION: ${{ steps.create-changelog-and-release.outputs.version }}
          FIXED_TAG: ${{ inputs.container_image_fixed_tag }}
        run: |
          if [[ -n "$FIXED_TAG" ]] ; then
            echo "IMAGE_TAG=$REGISTRY/$IMAGE_NAME:$FIXED_TAG" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=$REGISTRY/$IMAGE_NAME:$VERSION" >> $GITHUB_ENV
          fi

      - name: "Push docker image to ECR"
        run: docker push "$IMAGE_TAG"

      - name: "Deploying service to ECS"
        # https://github.com/brunocascio/ecs-deploy
        if: inputs.do_ecs_deployment
        uses: brunocascio/ecs-deploy@v2.0.0
        with:
          args: deploy ${{ steps.ecs_cluster_name_cs_production.outputs.value }} ${{ steps.ecs_service_name_production.outputs.value }} --image ${{ steps.ecs_taskDefinition_container_name.outputs.value }} ${{ env.IMAGE_TAG }} --region ${{ secrets.AWS_REGION }} --timeout 600 --rollback

      - name: "Slack: Success"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          slack_message_ts: ${{ steps.slack-progress.outputs.slack_message_ts }}
          slack_reaction: white_check_mark
          job: RELEASE
          status: SUCCESS
          type: SERVICE
          changelog: ${{ steps.create-changelog-and-release.outputs.changelog }}
          version: ${{ steps.create-changelog-and-release.outputs.version }}

      - name: "Slack: Failure"
        if: ${{ failure() }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          slack_message_ts: ${{ steps.slack-progress.outputs.slack_message_ts }}
          job: RELEASE
          status: FAILURE
          type: SERVICE
          version: ${{ steps.create-changelog-and-release.outputs.version }}
