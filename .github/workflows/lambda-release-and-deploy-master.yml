name: "Lambda: Release and deploy to PROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "11"
        type: string
      create_pr_environment:
        description: "Optional, set to true if pull requests are verified against AWS infrastructure that is created per pull request"
        required: false
        default: false
        type: boolean
      prod_function_name:
        description: "Name of the AWS lambda function deployed to the PROD environment"
        required: true
        type: string
      jar_file:
        description: "The path to the Jar file to be uploaded when deploying the lambda function. You can use PROJECT_VERSION as a placeholder for the project version."
        required: true
        type: string
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      NONPROD_AWS_SECRET_ACCESS_KEY:
        required: true
      NONPROD_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_SECRET_ACCESS_KEY:
        required: true
      PRODUCTION_DEPLOYMENTS_SLACK_CHANNEL_ID:
        required: true
      SLACK_BOT_TOKEN_OMG_BACKEND:
        required: true
      SLACK_BOT_SIGNING_SECRET_OMG_BACKEND:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_URL:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lambda-release-and-deploy-master:
    runs-on: ubuntu-20.04

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Read sonar.project.key from workflow.properties"
        id: sonar_project_key
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "sonar.project.key"

      - name: "Env variable: REPO_BASE_URL"
        run: echo "REPO_BASE_URL=https://github.com/CleverShuttle/${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: "Set up JDK"
        uses: actions/setup-java@v2
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Configure AWS credentials for integration tests"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Copy Maven settings"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1.26.0

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Generate changelog and create release"
        id: create-changelog-and-release
        uses: CleverShuttle/gh-composite-actions/actions/create-changelog-and-release@v1.26.0
        with:
          artifactory_username: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: "Test lambda with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean package

      - name: "Create and deploy lambda for integration tests"
        if: inputs.create_pr_environment
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.PROJECT_VERSION }}
        run: |-
          terraform init \
          && terraform apply -auto-approve \
          && echo "Giving AWS time to create the kinesis event iterator so it able to catch the first test event ..." \
          && sleep 70 \
          && echo "FUNCTION_NAME=$(terraform output -raw function_name)" >> $GITHUB_ENV \
          && echo "KINESIS_INPUT_STREAM=$(terraform output -raw kinesis_input_stream)" >> $GITHUB_ENV

      - name: "Test lambda integration with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          AWS_TEST_KINESIS_INPUT_STEAM: ${{ env.KINESIS_INPUT_STREAM }}
        run: mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn install

      - name: "Remove lambda after integration tests"
        if: inputs.create_pr_environment && always()
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.PROJECT_VERSION }}
        run: terraform apply -destroy -auto-approve

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Deploy to Artifactory"
        continue-on-error: true
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -DskipDockerBuild -DskipForbiddenApisCheck -Dmaven.main.skip -DskipTests -DskipIntegrationTests -DskipUnitTests -DskipDependencyCheck deploy

      - name: "Sonar: Run analysis for master"
        uses: CleverShuttle/gh-composite-actions/actions/sonar-java-analysis-master@v1.26.0
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          artifactory_username: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          sonar_url: ${{ secrets.SONAR_URL }}
          sonar_project_key: ${{ steps.sonar_project_key.outputs.value }}

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Deploy lambda function"
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1.26.0
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ env.NONPROD_VERSION }}
          function_name: ${{ inputs.prod_function_name }}
          jar_file: ${{ inputs.jar_file }}

      # ---------------------- TODO new composite action:

      - name: "Format changelog for slack"
        if: ${{ steps.create-changelog-and-release.outputs.changelog-skipped == 'false' }}
        id: changelog_format
        uses: lovetoknow/slackify-markdown-action@v1.0.0
        with:
          text: ${{ steps.create-changelog-and-release.outputs.changelog }}

      - name: "Generate changelog title"
        id: changelog_title
        if: ${{ steps.create-changelog-and-release.outputs.changelog-skipped == 'false' }}
        run: |
          output="*Changelog*"
          echo "::set-output name=text::$output"

      - name: "Notification: Success"
        if: ${{ success() && github.event.sender.login != 'renovate[bot]' }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.PRODUCTION_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            <${{ env.REPO_BASE_URL }}|${{ github.event.repository.name }}> ${{ steps.create-changelog-and-release.outputs.version }} was successfully deployed to `PROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>

            ${{ steps.changelog_title.outputs.text }}

            ${{ steps.changelog_format.outputs.text }}

      - name: "Notification: Failure"
        if: ${{ failure() }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.PRODUCTION_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            :x: <${{ env.REPO_BASE_URL }}|${{ github.event.repository.name }}> ${{ steps.create-changelog-and-release.outputs.version }} failed to deploy to `PROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>
