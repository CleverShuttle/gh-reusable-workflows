name: "Lambda: Deploy to NONPROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "11"
        type: string
      create_pr_environment:
        description: "Optional, set to true if pull requests are verified against AWS infrastructure that is created per pull request"
        required: false
        default: false
        type: boolean
      deploy_e2etest:
        description: "Optional, defaults to true, set to false if the lambda should not be deployed to the E2ETEST environment"
        required: false
        default: true
        type: boolean
      nonprod_function_name:
        description: "Name of the AWS lambda function deployed to the NONPROD environment"
        required: true
        type: string
      e2etest_function_name:
        description: "Name of the AWS lambda function deployed to the E2ETEST environment (Required when deploy_e2etest is true)"
        required: false
        type: string
      jar_file:
        description: "The path to the Jar file to be uploaded when deploying the lambda function. You can use PROJECT_VERSION as a placeholder for the project version."
        required: true
        type: string
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      NONPROD_AWS_SECRET_ACCESS_KEY:
        required: true
      NONPROD_AWS_ACCESS_KEY_ID:
        required: true
      SLACK_BOT_TOKEN_OMG_BACKEND:
        required: true
      SLACK_BOT_SIGNING_SECRET_OMG_BACKEND:
        required: true
      TEST_DEPLOYMENTS_SLACK_CHANNEL_ID:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lambda-deploy-nonprod:
    runs-on: ubuntu-20.04
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
      REPO_BASE_URL: "https://github.com/CleverShuttle/${{ github.event.repository.name }}"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v2
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings.xml"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1.30.1

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Env variable: PROJECT_VERSION"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "PROJECT_VERSION=$(mvn ${{ env.MAVEN_ARGS }} -Dexpression=project.artifactId -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: NONPROD_VERSION"
        run: echo "NONPROD_VERSION=${{ env.PROJECT_VERSION }}-NONPROD-${{ github.run_number }}" >> $GITHUB_ENV

      - name: "Bump Version"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn ${{ env.MAVEN_ARGS }} -DnewVersion="${{ env.NONPROD_VERSION }}" -DprocessAllModules=true versions:set

      - name: "Test lambda with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn ${{ env.MAVEN_ARGS }} clean package

      - name: "Create and deploy lambda for integration tests"
        if: inputs.create_pr_environment
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.NONPROD_VERSION }}
        run: |
          terraform init \
          && terraform apply -auto-approve \
          && echo "Giving AWS time to create the kinesis event iterator so it able to catch the first test event ..." \
          && sleep 70 \
          && echo "FUNCTION_NAME=$(terraform output -raw function_name)" >> $GITHUB_ENV \
          && echo "KINESIS_INPUT_STREAM=$(terraform output -raw kinesis_input_stream)" >> $GITHUB_ENV

      - name: "Test lambda integration with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          AWS_TEST_KINESIS_INPUT_STEAM: ${{ env.KINESIS_INPUT_STREAM }}
        run: mvn ${{ env.MAVEN_ARGS }} install

      - name: "Remove lambda after integration tests"
        if: inputs.create_pr_environment && always()
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.NONPROD_VERSION }}
        run: terraform apply -destroy -auto-approve

      - name: "Deploy to Artifactory"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mvn ${{ env.MAVEN_ARGS }} deploy \
          -DskipDockerBuild \
          -DskipForbiddenApisCheck \
          -Dmaven.main.skip \
          -DskipTests \
          -DskipIntegrationTests \
          -DskipUnitTests \
          -DskipDependencyCheck

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Deploy lambda function to NONPROD"
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1.30.1
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ env.NONPROD_VERSION }}
          function_name: ${{ inputs.nonprod_function_name }}
          jar_file: ${{ inputs.jar_file }}

      - name: "Deploy lambda function to E2ETEST"
        if: inputs.deploy_e2etest
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1.30.1
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ env.NONPROD_VERSION }}
          function_name: ${{ inputs.e2etest_function_name }}
          jar_file: ${{ inputs.jar_file }}

      - name: "Generate NONPROD changelog"
        id: create-nonprod-changelog
        uses: CleverShuttle/gh-composite-actions/actions/create-nonprod-changelog@v1.30.1

      # ---------------------- TODO new composite action:

      - name: "Format changelog for slack"
        id: changelog_format
        uses: lovetoknow/slackify-markdown-action@v1.0.0
        with:
          text: ${{ steps.create-nonprod-changelog.outputs.changelog }}

      - name: "Notification: Success"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.TEST_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            :white_check_mark: Lambda <${{ env.REPO_BASE_URL }}/tree/nonprod|${{ github.event.repository.name }}> ( version `${{ env.NONPROD_VERSION }}` ) was successfully deployed to `NONPROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>

            ${{ steps.changelog_format.outputs.text }}

      - name: "Notification: Failure"
        if: ${{ failure() }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.TEST_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            :x: Lambda <${{ env.REPO_BASE_URL }}/tree/nonprod|${{ github.event.repository.name }}> ( version `${{ env.NONPROD_VERSION }}` ) failed to be deployed to `NONPROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>
