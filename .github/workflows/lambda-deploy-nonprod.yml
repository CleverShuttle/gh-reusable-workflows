name: "Lambda: Deploy to NONPROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "11"
        type: string
      trigger_test_automation:
        description: "Triggers https://github.com/CleverShuttle/cs-ops-control-tests"
        required: false
        type: boolean
      slack_message_timestamp:
        description: "Optional Slack message timestamp"
        type: string
        required: false
      create_pr_environment:
        description: "Optional, set to true if pull requests are verified against AWS infrastructure that is created per pull request"
        required: false
        default: false
        type: boolean
      deploy_e2etest:
        description: "Optional, defaults to true, set to false if the lambda should not be deployed to the E2ETEST environment"
        required: false
        default: true
        type: boolean
      nonprod_function_name:
        description: "Name of the AWS lambda function deployed to the NONPROD environment"
        required: true
        type: string
      e2etest_function_name:
        description: "Name of the AWS lambda function deployed to the E2ETEST environment (Required when deploy_e2etest is true)"
        required: false
        type: string
      jar_file:
        description: "The path to the Jar file to be uploaded when deploying the lambda function. You can use PROJECT_VERSION as a placeholder for the project version."
        required: true
        type: string
    secrets:
      REPO_ACCESS_TOKEN:
        description: "Necessary for downstream test automation - see https://github.com/peter-evans/repository-dispatch#token"
        required: false
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      NONPROD_AWS_SECRET_ACCESS_KEY:
        required: true
      NONPROD_AWS_ACCESS_KEY_ID:
        required: true
      SLACK_TOKEN:
        required: true
      SLACK_CHANNEL_ID:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency: ${{ github.workflow }}

jobs:
  lambda-deploy-nonprod:
    runs-on: ubuntu-20.04
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings.xml"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Env variable: PROJECT_VERSION"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "PROJECT_VERSION=$(mvn $MAVEN_ARGS -Dexpression=project.version -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: NONPROD_VERSION"
        env:
          RUN: ${{ github.run_number }}
        run: echo "NONPROD_VERSION=${PROJECT_VERSION}-NONPROD-$RUN" >> $GITHUB_ENV

      - name: "Bump Version"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn $MAVEN_ARGS -DnewVersion="$NONPROD_VERSION" -DprocessAllModules=true versions:set

      - name: "Test lambda with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn $MAVEN_ARGS clean package

      - name: "Create and deploy lambda for integration tests"
        if: inputs.create_pr_environment
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.NONPROD_VERSION }}
        run: |
          terraform init \
          && terraform apply -auto-approve \
          && echo "Giving AWS time to create the kinesis event iterator so it able to catch the first test event ..." \
          && sleep 70 \
          && echo "FUNCTION_NAME=$(terraform output -raw function_name)" >> $GITHUB_ENV \
          && echo "KINESIS_INPUT_STREAM=$(terraform output -raw kinesis_input_stream)" >> $GITHUB_ENV

      - name: "Test lambda integration with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          AWS_TEST_KINESIS_INPUT_STEAM: ${{ env.KINESIS_INPUT_STREAM }}
        run: mvn $MAVEN_ARGS install

      - name: "Remove lambda after integration tests"
        if: inputs.create_pr_environment && always()
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.NONPROD_VERSION }}
        run: terraform apply -destroy -auto-approve

      - name: "Deploy to Artifactory"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mvn $MAVEN_ARGS deploy \
          -DskipDockerBuild \
          -DskipForbiddenApisCheck \
          -Dmaven.main.skip \
          -DskipTests \
          -DskipIntegrationTests \
          -DskipUnitTests \
          -DskipDependencyCheck

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Deploy lambda function to NONPROD"
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ env.NONPROD_VERSION }}
          function_name: ${{ inputs.nonprod_function_name }}
          jar_file: ${{ inputs.jar_file }}

      - name: "Deploy lambda function to E2ETEST"
        if: inputs.deploy_e2etest
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ env.NONPROD_VERSION }}
          function_name: ${{ inputs.e2etest_function_name }}
          jar_file: ${{ inputs.jar_file }}

      - name: "Generate NONPROD changelog"
        id: create-nonprod-changelog
        uses: CleverShuttle/gh-composite-actions/actions/create-nonprod-changelog@v1

      - name: "Slack: Success"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          slack_message_ts: ${{ inputs.slack_message_timestamp }}
          slack_reaction: white_check_mark
          changelog: ${{ steps.create-nonprod-changelog.outputs.changelog }}
          job: PULL_REQUEST
          status: SUCCESS
          type: LAMBDA
          version: ${{ env.NONPROD_VERSION }}

      - name: "Slack: Failure"
        if: ${{ failure() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/'))  }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          job: PULL_REQUEST
          status: FAILURE
          type: LAMBDA
          version: ${{ env.NONPROD_VERSION }}

      - name: "Trigger test automation"
        if: ${{ success() && inputs.trigger_test_automation }}
        uses: CleverShuttle/gh-composite-actions/actions/trigger-test-automation@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          slack_message_ts: ${{ inputs.slack_message_timestamp }}
