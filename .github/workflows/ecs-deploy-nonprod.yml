name: "ECS: Deploy to NONPROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "17"
        type: string
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      ECR_REGISTRY:
        required: true
      NONPROD_AWS_SECRET_ACCESS_KEY:
        required: true
      NONPROD_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_BOT_SIGNING_SECRET_OMG_BACKEND:
        required: true
      SLACK_BOT_TOKEN_OMG_BACKEND:
        required: true
      TEST_DEPLOYMENTS_SLACK_CHANNEL_ID:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ecs-deploy-nonprod:
    runs-on: ubuntu-20.04
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
      REPO_BASE_URL: "https://github.com/CleverShuttle/${{ github.event.repository.name }}"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v2
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings.xml"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1.30.5

      - name: "Install xmlstarlet"
        run: sudo apt-get install xmlstarlet

      - name: "Read ecr.image.name from workflow.properties"
        id: ecr_image_name
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecr.image.name"

      - name: "Read ecs.taskDefinition.container.name from workflow.properties"
        id: ecs_taskDefinition_container_name
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.taskDefinition.container.name"

      - name: "Read ecs.cluster.name.cs.nonprod from workflow.properties"
        id: ecs_cluster_name_cs_nonprod
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.cluster.name.cs.nonprod"

      - name: "Read ecs.service.name.nonprod from workflow.properties"
        id: ecs_service_name_nonprod
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: ".github/workflows/workflow.properties"
          property: "ecs.service.name.nonprod"

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Login to ECR"
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
          username: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}

      - name: "Env variable: PROJECT_VERSION"
        run: echo "PROJECT_VERSION=$(xmlstarlet sel -N my=http://maven.apache.org/POM/4.0.0 -t -m my:project -v my:version pom.xml)" >> $GITHUB_ENV

      - name: "Env variable: NONPROD_VERSION"
        run: echo "NONPROD_VERSION=${{ env.PROJECT_VERSION }}-NONPROD-${{ github.run_number }}" >> $GITHUB_ENV

      - name: "Bump Version"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn ${{ env.MAVEN_ARGS }} -DnewVersion="${{ env.NONPROD_VERSION }}" -DprocessAllModules=true versions:set

      - name: "Build ECS with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn ${{ env.MAVEN_ARGS }} clean install

      - name: "Deploy to Artifactory"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mvn ${{ env.MAVEN_ARGS }} deploy \
          -DskipDockerBuild \
          -DskipForbiddenApisCheck \
          -Dmaven.main.skip \
          -DskipTests \
          -DskipIntegrationTests \
          -DskipUnitTests \
          -DskipDependencyCheck

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Env variable: IMAGE_TAG"
        run: echo "IMAGE_TAG=${{ secrets.ECR_REGISTRY }}/${{ steps.ecr_image_name.outputs.value }}:${{ env.NONPROD_VERSION }}" >> $GITHUB_ENV

      - name: "Push docker image to ECR"
        run: docker push ${{ env.IMAGE_TAG }}

      - name: "Deploying service to ECS"
        uses: brunocascio/ecs-deploy@v2.0.0
        with:
          args: deploy ${{ steps.ecs_cluster_name_cs_nonprod.outputs.value }} ${{ steps.ecs_service_name_nonprod.outputs.value }} --image ${{ steps.ecs_taskDefinition_container_name.outputs.value }} ${{ env.IMAGE_TAG }} --region ${{ secrets.AWS_REGION }} --timeout 600 --rollback

      - name: "Generate NONPROD changelog"
        id: create-nonprod-changelog
        uses: CleverShuttle/gh-composite-actions/actions/create-nonprod-changelog@v1.30.5

      # ---------------------- TODO new composite action:

      - name: "Format changelog for slack"
        id: changelog_format
        uses: lovetoknow/slackify-markdown-action@v1.0.0
        with:
          text: ${{ steps.create-nonprod-changelog.outputs.changelog }}

      - name: "Notification: Success"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.TEST_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            :white_check_mark: Service <${{ env.REPO_BASE_URL }}/tree/nonprod|${{ github.event.repository.name }}> ( version `${{ env.NONPROD_VERSION }}` ) was successfully deployed to `NONPROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>

            ${{ steps.changelog_format.outputs.text }}

      - name: "Notification: Failure"
        if: ${{ failure() }}
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{secrets.SLACK_BOT_TOKEN_OMG_BACKEND}}
          secret: ${{secrets.SLACK_BOT_SIGNING_SECRET_OMG_BACKEND}}
          channel: ${{secrets.TEST_DEPLOYMENTS_SLACK_CHANNEL_ID}}
          message: |
            :x: Service <${{ env.REPO_BASE_URL }}/tree/nonprod|${{ github.event.repository.name }}> ( version `${{ env.NONPROD_VERSION }}` ) failed to be deployed to `NONPROD` – <${{ env.REPO_BASE_URL }}/actions/runs/${{ github.run_id }}|Details>
