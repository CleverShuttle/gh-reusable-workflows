name: "Lambda: Deploy version to PROD"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "11"
        type: string
      prod_function_name:
        description: "Name of the AWS lambda function deployed to the PROD environment"
        required: true
        type: string
      jar_file:
        description: "The path to the Jar file to be uploaded when deploying the lambda function. You can use PROJECT_VERSION as a placeholder for the project version."
        required: true
        type: string
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      PRODUCTION_AWS_ACCESS_KEY_ID:
        required: true
      PRODUCTION_AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_CHANNEL_ID:
        required: true
      SLACK_TOKEN:
        required: true

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency: ${{ github.workflow }}

jobs:
  lambda-deploy-version-prod:
    runs-on: ubuntu-20.04
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings.xml"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1

      - name: "Env variable: MAVEN_GROUP_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_GROUP_ID=$(mvn $MAVEN_ARGS -Dexpression=project.groupId -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: MAVEN_ARTIFACT_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_ARTIFACT_ID=$(mvn $MAVEN_ARGS -Dexpression=project.artifactId -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Create download destination file name"
        env:
          JAR_FILE_WITH_PLACEHOLDER: ${{ inputs.jar_file }}
          VERSION: ${{ github.event.inputs.version }}
        run: echo "DOWNLOAD_DESTINATION=${JAR_FILE_WITH_PLACEHOLDER/PROJECT_VERSION/$VERSION}" >> $GITHUB_ENV

      - name: "Download lambda function code"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          mvn $MAVEN_ARGS \
            -Dartifact="${MAVEN_GROUP_ID}:${MAVEN_ARTIFACT_ID}:${VERSION}:jar" \
            -Dtransitive=false \
            -Ddest="$DOWNLOAD_DESTINATION" \
            dependency:get

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Slack: In progress"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        id: slack-progress
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          job: DEPLOY_VERSION
          status: IN_PROGRESS
          type: LAMBDA

      - name: "Deploy lambda function"
        uses: CleverShuttle/gh-composite-actions/actions/deploy-lambda-function@v1
        with:
          aws_access_key_id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_secret_access_key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          project_version: ${{ github.event.inputs.version }}
          function_name: ${{ inputs.prod_function_name }}
          jar_file: ${{ inputs.jar_file }}

      - name: "Slack: Success"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          slack_message_ts: ${{ steps.slack-progress.outputs.slack_message_ts }}
          slack_reaction: white_check_mark
          job: DEPLOY_VERSION
          status: SUCCESS
          type: LAMBDA
          version: ${{ github.event.inputs.version }}

      - name: "Slack: Failure"
        if: ${{ failure() }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          job: DEPLOY_VERSION
          status: FAILURE
          type: LAMBDA
          version: ${{ github.event.inputs.version }}
