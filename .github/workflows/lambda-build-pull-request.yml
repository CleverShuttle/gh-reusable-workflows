name: "Lambda: Build pull request"

on:
  workflow_call:
    inputs:
      java_version:
        required: false
        default: "11"
        type: string
      create_pr_environment:
        description: "Optional, set to true if pull requests are verified against AWS infrastructure that is created per pull request"
        required: false
        default: false
        type: boolean
    outputs:
      slack_message_timestamp:
        description: "Slack message timestamp"
        value: ${{ jobs.lambda-build-pull-request.outputs.slack_message_timestamp }}
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      AWS_REGION:
        required: true
      NONPROD_AWS_SECRET_ACCESS_KEY:
        required: true
      NONPROD_AWS_ACCESS_KEY_ID:
        required: true
      SLACK_TOKEN:
        required: true
      SLACK_CHANNEL_ID:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_URL:
        required: true

jobs:
  lambda-build-pull-request:
    runs-on: ubuntu-20.04
    outputs:
      slack_message_timestamp: ${{ steps.slack-progress.outputs.slack_message_ts }}
    env:
      MAVEN_ARGS: "--batch-mode --no-transfer-progress"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          java-version: "${{ inputs.java_version }}"
          distribution: "temurin"

      - name: "Restore Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: "Copy Maven settings.xml"
        uses: CleverShuttle/gh-composite-actions/actions/maven-settings@v1

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.NONPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NONPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Env variable: MAVEN_GROUP_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_GROUP_ID=$(mvn $MAVEN_ARGS -Dexpression=project.groupId -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: MAVEN_ARTIFACT_ID"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "MAVEN_ARTIFACT_ID=$(mvn $MAVEN_ARGS -Dexpression=project.artifactId -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Env variable: PROJECT_VERSION"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: echo "PROJECT_VERSION=$(mvn $MAVEN_ARGS -Dexpression=project.version -q -DforceStdout org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate 2>/dev/null)" >> $GITHUB_ENV

      - name: "Slack: In progress"
        if: ${{ success() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/')) }}
        id: slack-progress
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          job: PULL_REQUEST
          status: IN_PROGRESS
          type: LAMBDA

      - name: "Build lambda with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn $MAVEN_ARGS clean package

      - name: "Create and deploy lambda for integration tests"
        if: inputs.create_pr_environment
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.PROJECT_VERSION }}
        run: |
          terraform init \
          && terraform apply -auto-approve \
          && echo "Giving AWS time to create the kinesis event iterator so it able to catch the first test event ..." \
          && sleep 70 \
          && echo "FUNCTION_NAME=$(terraform output -raw function_name)" >> $GITHUB_ENV \
          && echo "KINESIS_INPUT_STREAM=$(terraform output -raw kinesis_input_stream)" >> $GITHUB_ENV

      - name: "Test lambda integration with Maven"
        env:
          USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          AWS_TEST_KINESIS_INPUT_STEAM: ${{ env.KINESIS_INPUT_STREAM }}
        run: mvn $MAVEN_ARGS install

      - name: "Remove lambda after integration tests"
        if: inputs.create_pr_environment && always()
        working-directory: terraform/environments/pr
        env:
          TF_VAR_project_version: ${{ env.PROJECT_VERSION }}
        run: terraform apply -destroy -auto-approve

      - name: "Run Sonar analysis for pull requests"
        uses: CleverShuttle/gh-composite-actions/actions/sonar-java-analysis-pull-request@v1
        with:
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          artifactory_username: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          sonar_url: ${{ secrets.SONAR_URL }}
          sonar_project_key: "${{ env.MAVEN_GROUP_ID }}:${{ env.MAVEN_ARTIFACT_ID }}"

      - name: "Save Maven cache"
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: "Slack: Failure"
        if: ${{ failure() && !(github.event.sender.login == 'renovate[bot]' || startsWith(github.event.head_commit.message, 'renovate/'))  }}
        uses: CleverShuttle/gh-composite-actions/actions/slack-status@v1
        with:
          slack_token: ${{secrets.SLACK_TOKEN}}
          slack_channel_id: ${{secrets.SLACK_CHANNEL_ID}}
          slack_message_ts: ${{ steps.slack-progress.outputs.slack_message_ts }}
          job: PULL_REQUEST
          status: FAILURE
          type: LAMBDA
